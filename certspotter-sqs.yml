AWSTemplateFormatVersion: 2010-09-09
Description: SSLMate Cert Spotter monitor of the Certificate Transparency logs, emitting events to SQS
Metadata:
  SourceCode: https://github.com/mozilla/certspotter-cloudformation
  Version: 7.0.0
Parameters:
  SSHKeyName:
    Description: SSH Key Name
    Type: 'AWS::EC2::KeyPair::KeyName'
  SQSRegion:
    Description: The AWS region containing the target SQS queue. Leave blank for the current region.
    Type: String
    Default: ''
  SQSQueueName:
    Description: The name of the SQS queue to send events to
    Type: String
  SQSAccountId:
    Description: The AWS account ID that contains the SQS queue if that queue is not
      in the local account or the local account's account id if the SQS queue is local. Leave blank
      for the current account.
    Type: String
    Default: ''
  DynamoDBTableName:
    Description: The name of the DynamoDB table to store matching cert records in
    Type: String
    Default: CertificateTransparencyMatches
  DynamoDBTableRegion:
    Description: The region of the DynamoDB table. Leave blank for the current region.
    Type: String
    Default: ''
  WatchListURI:
    Description: An S3 URL to a JSON document containing the list of domains
      under a 'domains' key
    Type: String
    ConstraintDescription: An S3 URL beginning with s3://
    AllowedPattern: '^s3://.*'
  EIPAllocationId:
    Description: The optional Allocation ID of the already existing Elastic IP you
      want to associate with this new instance
    Type: String
    Default: ''
  StartFromEndOfCTLogs:
    Description: 'Should certspotter start from the current end of the certificate transparency logs? "true" or "false" (Default : true)'
    Type: String
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either "true" or "false"
    Default: true
  LatestAmiId:
    Description: The public SSM path to the Ubuntu AMI IDs
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'

Conditions:
  AssociateEIP: !Not [ !Equals [ !Ref 'EIPAllocationId', '' ] ]
  BlankSQSRegion: !Equals [ !Ref 'SQSRegion', '' ]
  BlankSQSAccountId: !Equals [ !Ref 'SQSAccountId', '' ]
  BlankDynamoDBTableRegion: !Equals [ !Ref 'DynamoDBTableRegion', '' ]
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      SecurityGroupIngress:
        - FromPort: 22
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          ToPort: 22
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SendSQSMessage
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:Send*
                  - sqs:GetQueueUrl
                Resource: !Join [ '', [ 'arn:aws:sqs:', !If [BlankSQSRegion, !Ref 'AWS::Region', !Ref SQSRegion], ':', !If [BlankSQSAccountId, !Ref 'AWS::AccountId', !Ref SQSAccountId], ':', !Ref 'SQSQueueName', '*' ] ]
        - PolicyName: StoreRecordInDynamoDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:PutItem
                Resource: !Join [ '', [ 'arn:aws:dynamodb:', !If [BlankDynamoDBTableRegion, !Ref 'AWS::Region', !Ref DynamoDBTableRegion], ':', !Ref 'AWS::AccountId', ':table/', !Ref 'DynamoDBTableName' ] ]
        - PolicyName: ReadS3Watchlist
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join [ '', [ 'arn:aws:s3:::', !Select [ '2', !Split [ '/', !Ref 'WatchListURI' ] ], '/*' ] ]
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join [ '', [ 'arn:aws:s3:::', !Select [ '2', !Split [ '/', !Ref 'WatchListURI' ] ] ] ]
              - Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: '*'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMRole
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: IMDSv2Required
      LaunchTemplateData:
        MetadataOptions:
          HttpTokens: required
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: c7a.medium
      Tags:
        - Key: Name
          Value: certspotter
      KeyName: !Ref SSHKeyName
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          useradd --comment "Certspotter Daemon" --create-home certspotter
          for i in {1..3}; do apt update && apt -y install python3-pip git jq && break || sleep 10; done
          python3 -m pip install --upgrade pip
          PIP_ROOT_USER_ACTION=ignore /bin/pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz awscli boto3
          cat << 'EOF' > /etc/systemd/system/certspotter.service
          [Unit]
          Description=Certificate Transparency Log Monitor
          Documentation=man:certspotter(8)
          After=network-online.target
          Wants=network-online.target
          
          [Service]
          Type=simple
          User=certspotter
          Group=certspotter
          ExecStart=/home/certspotter/gocode/bin/certspotter -verbose
          # not strict, because we want to allow some flexibility to hooks
          ProtectSystem=full
          Restart=on-failure
          
          [Install]
          WantedBy=multi-user.target
          EOF
          snap disable amazon-ssm-agent
          wget --no-verbose https://go.dev/dl/go1.21.4.linux-amd64.tar.gz
          rm -rf /usr/local/go && tar -C /usr/local -xzf go1.21.4.linux-amd64.tar.gz
          echo "export PATH=$PATH:/usr/local/go/bin" >> /etc/profile
          install --owner=certspotter --group=certspotter --directory /home/certspotter/gocode
          install --owner=certspotter --group=certspotter --directory /home/certspotter/.certspotter
          install --owner=certspotter --group=certspotter --directory /home/certspotter/.certspotter/hooks.d
          install --owner=certspotter --group=certspotter --mode=0644 /dev/null /home/certspotter/.certspotter/watchlist
          /usr/local/bin/aws s3 cp --quiet ${WatchListURI} /dev/stdout | jq -r '.domains|map("."+.)|.[]' > /home/certspotter/.certspotter/watchlist
          runuser --login certspotter -c 'GOPATH=/home/certspotter/gocode /usr/local/go/bin/go install software.sslmate.com/src/certspotter/cmd/certspotter@latest'
          install --owner=certspotter --group=certspotter --mode=0755 /dev/null /home/certspotter/.certspotter/hooks.d/send_to_sqs.py
          install --owner=certspotter --group=certspotter --mode=0644 /dev/null /home/certspotter/certspotter_config.txt
          echo -n "${AWS::Region},${AWS::AccountId},${SQSRegion},${SQSQueueName},${SQSAccountId},${DynamoDBTableName},${DynamoDBTableRegion}" > /home/certspotter/certspotter_config.txt
          cat << 'EOF' > /home/certspotter/.certspotter/hooks.d/send_to_sqs.py
          #!/usr/bin/env python3
          import os, json, datetime, boto3
          base_dir = '/home/certspotter'
          with open(f'{base_dir}/certspotter_config.txt') as f:
              ARGS = [x.strip() for x in f.read().split(',')]

          data = {}
          field_map = {
              'FINGERPRINT': 'ssl_hash',
              'ISSUER_DN': 'ssl_issuer',
              'SERIAL': 'ssl_serial',
              'SUBJECT_DN': 'ssl_subject',
              'NOT_AFTER_UNIXTIME': 'ssl_end_time',
              'NOT_BEFORE_UNIXTIME': 'ssl_start_time',
              'LOG_URI': 'log_uri',
              'PUBKEY_HASH': 'pubkey_hash',
              'CERT_PARSEABLE': 'cert_parseable',
              'ENTRY_INDEX': 'entry_index',
          }
          for key in (set(os.environ.keys()) & field_map.keys()):
              data[field_map[key]] = os.environ[key]
          if 'JSON_FILENAME' not in os.environ:
              with open(f'{base_dir}/certificates_matched.log', 'a') as f:
                  f.write(f"{datetime.datetime.now()} : ERROR encountered, missing JSON_FILENAME : {json.dumps(dict(os.environ))}\n")
              exit(0)
          with open(os.environ['JSON_FILENAME']) as f:
              json_file_data = json.load(f)
          data['dnsnames'] = json_file_data['dns_names']
          with open(f'{base_dir}/.certspotter/watchlist') as f:
              watchlist = f.read().splitlines()

          def in_watchlist(name, watchlist):
              matching_names = [watchname for watchname in watchlist if watchname[:1] == '.' and (name.endswith(watchname) or name == watchname.lstrip('.'))]
              return (name in watchlist) or matching_names

          data['watched_dnsnames'] = [dnsname for dnsname in data['dnsnames'] if in_watchlist(dnsname, watchlist)]
          data['summary'] = f"New certificate{'s' if len(data['watched_dnsnames']) > 1 else ''} in CT logs for {', '.join(data['watched_dnsnames'])}"
          record_id = f"{data['ssl_issuer']}, {data['ssl_serial']}"
          with open(f'{base_dir}/certificates_matched.log', 'a') as f:
              f.write(f"{datetime.datetime.now()} : {data['summary']} with ID \"{record_id}\"\n")
          ARGS[2] = ARGS[2] if ARGS[2] else ARGS[0]
          ARGS[4] = ARGS[4] if ARGS[4] else ARGS[1]
          ARGS[6] = ARGS[6] if ARGS[6] else ARGS[0]
          if ARGS[2] and ARGS[3] and ARGS[4]:
              client = boto3.client('sqs', region_name=ARGS[2])
              queue_url = client.get_queue_url(QueueName=ARGS[3], QueueOwnerAWSAccountId=ARGS[4])['QueueUrl']
              client.send_message(QueueUrl=queue_url, MessageBody=json.dumps(data, sort_keys=True))
          if ARGS[5] and ARGS[6]:
              dynamodb = boto3.resource('dynamodb', region_name=ARGS[6])
              table = dynamodb.Table(ARGS[5])
              table.load()
              table.put_item(Item={
                  'id': record_id,
                  'date': int(data['ssl_start_time']),
                  'record': json.dumps(data, sort_keys=True)})
          EOF
          if [ "${StartFromEndOfCTLogs}" = "true" ]; then
              set +e
              runuser --login certspotter -c 'timeout 30 /home/certspotter/gocode/bin/certspotter -verbose -start_at_end'
              set -e
              echo "Initial certspotter index pointed to the end of current CT logs"
          fi
          systemctl daemon-reload && systemctl enable certspotter.service && systemctl start certspotter.service
          /usr/local/bin/cfn-signal '${WaitConditionHandle}'
  WaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Instance
    Properties:
      Handle: !Ref WaitConditionHandle
      Timeout: '300'
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: AssociateEIP
    Properties:
      AllocationId: !Ref EIPAllocationId
      InstanceId: !Ref Instance
Outputs:
  CloudInitOutput:
    Description: The data returned to the WaitConditionHandle from Cloud Init
    Value: !GetAtt WaitCondition.Data
